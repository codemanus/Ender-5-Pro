### CONFIG SAVER ###
# 
# This macro will check if a SAVE_CONFIG is pending.
# If so, it will perform the SAVE_CONFIG command.
# 
# It essentially functions as an automated SAVE_CONFIG (with some added QoL features) that
# can be used in your post-print macros to facilitate automated saving of config changes.
# 
# There are options to filter for only specific pending saves.
# FILTER=z_offset will only save z_offset changes and ignore others.
# 
# A SHUTDOWN=1 option is also included which will perform shutdown
# commands *after* the SAVE_CONFIG is executed if specified.
# 
# This allows for automated SAVE_CONFIG actions that don't result in
# the printer restarting and left idle after a print completes.
# Variables are used to prevent shutdown loops after every restart.
# 
# This effectively allows for a customizable automated wrapper of SAVE_CONFIG that
# supports "Save and Shutdown" in addition to the traditional "Save and Restart" 
# 
# This macro will output old/new values for any pending changes to the console by default.
# Use QUIET=1 to run the command silently with no extraneous console output.
# 
# The combination of SHUTDOWN=1 and filters can lead to a scenario where a filter prevents
# a pending save but a shutdown is still expected. In the case where a SAVE_CONFIG is cancelled
# by a filter and a shutdown is still called for, the shutdown will be delayed by 60 seconds and
# the user notified of the conflict.
# 
# During that delay, the shutdown can be cancelled by running STOP_SHUTDOWN. A message will be
# output to the console confirming the shutdown was successfully canceled and the user will be
# free to adjust the filters or otherwise address the conflict.
# 
# 
# NOTE: An additional macro is required for this to function:
# 
#  POWEROFF
# 
#  Pretty self-explanatory, it executes the steps to turn off your printer.
# 
# A couple Klipper features also must be enabled: (You can just uncomment these if necessary)
# 
# [respond]
# 
# [save_variables]
# filename: ~/printer_data/config/variables.cfg

[gcode_macro SAVE_AND_SHUTDOWN]
description: Save pending config changes and shutdown.
gcode:
    {% if params.FILTER %}
        {% if params.QUIET %}
            SAVE_AND_RESTART SHUTDOWN=1 FILTER={params.FILTER} QUIET={params.QUIET}
        {% else %}
            SAVE_AND_RESTART SHUTDOWN=1 FILTER={params.FILTER}
        {% endif %}
    {% else %}
        {% if params.QUIET %}
            SAVE_AND_RESTART SHUTDOWN=1 QUIET={params.QUIET}
        {% else %}
            SAVE_AND_RESTART SHUTDOWN=1
        {% endif %}
    {% endif %}


[gcode_macro SAVE_AND_RESTART]
description: Save pending config changes and restart.
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set config = printer.configfile %}
    {% set pending = config.save_config_pending %}
    {% set items = config.save_config_pending_items %}
    {% if config.config["bltouch"] %}
        {% set prober = config.config["bltouch"] %}
        {% set probe = 'bltouch' %}
    {% elif config.config["probe"] %}
        {% set prober = config.config["probe"] %}
        {% set probe = 'probe' %}
    {% else %}
        {% set probe = 'none' %}
    {% endif %}

    {% set SHUTDOWN = params.SHUTDOWN|default(0)|int %}
    {% set FILTER = params.FILTER|default('none')|string %}
    {% set QUIET = params.QUIET|default(0)|int %}

    {% if QUIET == 0 %}
        _VERBOSE_SAVE_STATS {rawparams} # Debugging stats
    {% endif %}
    

    {% if pending %} # If SAVE_CONFIG pending
        # Handle SHUTDOWN parameter
        {% if SHUTDOWN %}
            SAVE_VARIABLE VARIABLE=boot_shutdown VALUE=1
            {% set SHUTDOWN = 1 %}
        {% else %}
            SAVE_VARIABLE VARIABLE=boot_shutdown VALUE=0
            {% set SHUTDOWN = 0 %}
        {% endif %}
        # Handle FILTER parameter
        {% if FILTER != 'none' %}
            {% if items[probe] %}
                {% if not 'z_offset' in FILTER|string %}
                    {% if not probe in FILTER|string %}
                        {% set new_z_offset = items[probe].z_offset | float %}
                        {% set old_z_offset = prober.z_offset | float %}
                        {% if new_z_offset != old_z_offset %}
                            RESPOND TYPE=error MSG="z_offset will NOT be saved."
                            RESPOND MSG="Resetting z_offset..."
                            SET_GCODE_OFFSET Z=0
                            #TODO: Resetting z_offset still allows a SAVE_CONFIG with the prev value
                            #TODO: This makes the reset snippet above ineffective
                            #TODO: Will need to explore other options

                            # Set Filtered so the SAVE_CONFIG will be canceled
                            {% set FILTERED = True %}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endif %}
            {% if items['input_shaper'] %}
                {% if not 'input_shaper' in FILTER|string %}
                    {% if not 'shaper' in FILTER|string %}
                        RESPOND TYPE=error MSG="input_shaper will NOT be saved."
                        #TODO: Needs testing to confirm whether it is susceptible to the same issue as z_offset
                        {% set shaper = config.config["input_shaper"] %}
                        {% set pending_shaper = items['input_shaper'] %}
                        {% if pending_shaper.shaper_freq_y %}
                            {% set new_shaper_freq_y = pending_shaper.shaper_freq_y %}
                            {% if new_shaper_freq_y != shaper.shaper_freq_y %}
                                RESPOND MSG="Resetting shaper_freq_y...
                                SET_INPUT_SHAPER SHAPER_FREQ_Y={shaper.shaper_freq_y}
                            {% endif %}
                        {% endif %}
                        {% if pending_shaper.shaper_type_y %}
                            {% set new_shaper_type_y = pending_shaper.shaper_type_y %}
                            {% if new_shaper_type_y != shaper.shaper_type_y %}
                                RESPOND MSG="Resetting shaper_type_y...
                                SET_INPUT_SHAPER SHAPER_TYPE_Y={shaper.shaper_type_y}
                            {% endif %}
                        {% endif %}
                        {% if pending_shaper.shaper_freq_x %}
                            {% set new_shaper_freq_x = pending_shaper.shaper_freq_x %}
                            {% if new_shaper_freq_x != shaper.shaper_freq_x %}
                                RESPOND MSG="Resetting shaper_freq_x...
                                SET_INPUT_SHAPER SHAPER_FREQ_X={shaper.shaper_freq_x}
                            {% endif %}
                        {% endif %}
                        {% if pending_shaper.shaper_type_x %}
                            {% set new_shaper_type_x = pending_shaper.shaper_type_x %}
                            {% if new_shaper_type_x != shaper.shaper_type_x %}
                                RESPOND MSG="Resetting shaper_type_x...
                                SET_INPUT_SHAPER SHAPER_TYPE_X={shaper.shaper_type_x}
                            {% endif %}
                        {% endif %}
                        # Presumed unable to prevent save of prev value just like z_offset
                        {% set FILTERED = True %}
                    {% endif %}
                {% endif %}
            {% endif %}
            {% if items['extruder'] %}
                {% if not 'extruder' in FILTER|string %}
                    RESPOND TYPE=error MSG="extruder will NOT be saved."
                    {% set FILTERED = True %}
                {% endif %}
            {% endif %}
            {% if items['heater_bed'] %}
                {% if not 'heater_bed' in FILTER|string %}
                    RESPOND TYPE=error MSG="heater_bed will NOT be saved."
                    {% set FILTERED = True %}
                {% endif %}
            {% endif %}
            {% if items['bed_mesh'] %}
                {% if not 'bed_mesh' in FILTER|string %}
                    {% if not 'mesh' in FILTER|string %}
                        RESPOND TYPE=error MSG="bed_mesh will NOT be saved."
                        {% set FILTERED = True %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
        {% if SHUTDOWN %}
            RESPOND TYPE=error MSG="Klipper will shutdown after restart."
        {% endif %}
        {% if FILTERED != True %}
            UPDATE_DELAYED_GCODE ID=do_save DURATION=3
        {% endif %}
    {% else %}
        {% if SHUTDOWN %}
            {% if FILTERED == True %}
                RESPOND TYPE=error MSG="WARNING: A shutdown was requested but config changes will not be saved!!!"
                RESPOND TYPE=error MSG="The shutdown will be delayed for 60 seconds. Run STOP_SHUTDOWN to cancel"
                UPDATE_DELAYED_GCODE ID=delayed_off DURATION=60
            {% else %}
                SAVE_VARIABLE VARIABLE=boot_shutdown VALUE=0
                POWEROFF
            {% endif %}
        {% else %}
            RESPOND MSG="There are no pending changes."
        {% endif %}
    {% endif %}

[delayed_gcode do_save]
gcode:
    SAVE_CONFIG

[delayed_gcode wait_to_shutdown]
# Handles shutdown after filtered changes
gcode:
    {% if QUIET == 1 %}
        RESPOND TYPE=error MSG="The UNSAVED changes will now be output to the console for posterity."
        _VERBOSE_SAVE_STATS {rawparams}
    {% endif %}
    SAVE_VARIABLE VARIABLE=boot_shutdown VALUE=0
    POWEROFF

[gcode_macro STOP_SHUTDOWN]
# Allows canceling a delayed shutdown in progress
gcode:
    UPDATE_DELAYED_GCODE ID=delayed_off DURATION=0
    UPDATE_DELAYED_GCODE ID=save_off DURATION=0
    SAVE_VARIABLE VARIABLE=boot_shutdown VALUE=0
    RESPOND TYPE=error MSG="The shutdown was successfully cancelled."

[delayed_gcode boot_to_shutdown]
# Handles shutdown after SAVE_CONFIG restart
initial_duration: 5
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set boot_shutdown = svv.boot_shutdown|int %}
    SAVE_VARIABLE VARIABLE=boot_shutdown VALUE=0
    {% if boot_shutdown == 1 %}
        RESPOND TYPE=error MSG="The printer will shutdown momentarily."
        M117 Shutdown in progress
        _POWER_OFF_SLOW DELAY=10
    {% endif %}

[delayed_gcode save_off]
# Save and shutdown
gcode:
    SAVE_AND_RESTART SHUTDOWN=1

[gcode_macro _POWER_SAVE]
variable_value: 1
gcode:
    _POWEROFF_ACCESSORIES
    UPDATE_DELAYED_GCODE ID=save_off DURATION=5

[gcode_macro _POWER_OFF_SLOW]
gcode:
    {% set DURATION = params.DELAY|default(60)|int %}
    UPDATE_DELAYED_GCODE ID=delayed_off DURATION={DURATION}

[delayed_gcode delayed_off]
gcode:
    POWEROFF

### Verbose debugging output for CONFIG_SAVER
[gcode_macro _VERBOSE_SAVE_STATS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set config = printer.configfile %}
    {% set pending = config.save_config_pending %}
    {% set items = config.save_config_pending_items %}
    {% if config.config["bltouch"] %}
        {% set prober = config.config["bltouch"] %}
        {% set probe = 'bltouch' %}
    {% elif config.config["probe"] %}
        {% set prober = config.config["probe"] %}
        {% set probe = 'probe' %}
    {% else %}
        {% set probe = 'none' %}
    {% endif %}

    {% set SHUTDOWN = params.SHUTDOWN|default(0)|int %}
    {% set FILTER = params.FILTER|default('none')|string %}
    {% set QUIET = params.QUIET|default(0)|int %}

    {% if SHUTDOWN > 0 %}
        {% set SHUTDOWN = 1 %}
    {% else %}
        {% set SHUTDOWN = 0 %}
    {% endif %}

    {% if pending %} # If SAVE_CONFIG pending
        RESPOND TYPE=error MSG="A config change is pending."
        #RESPOND MSG="Pending changes: {items}"
        {% if FILTER != 'none' %}
            RESPOND MSG="Filtering Config changes."
        {% endif %}  
        {% if items[probe] %}
            {% set new_z_offset = items[probe].z_offset | float %}
            {% set old_z_offset = prober.z_offset | float %}
            {% if new_z_offset != old_z_offset %}
                {% set walkback_offset = ((new_z_offset - old_z_offset) * -1) | float %}
                RESPOND MSG="New  z_offset: "{new_z_offset}
                RESPOND MSG="Old  z_offset: "{prober.z_offset}
                RESPOND MSG="Diff z_offset: "{walkback_offset}
            {% endif %}
            RESPOND MSG="Z_OFFSET"
        {% endif %}
        {% if items['input_shaper'] %}
            {% set shaper = config.config["input_shaper"] %}
            {% set pending_shaper = items['input_shaper'] %}
            {% if pending_shaper.shaper_freq_y %}
                {% set new_shaper_freq_y = pending_shaper.shaper_freq_y %}
                {% if new_shaper_freq_y != shaper.shaper_freq_y %}
                    RESPOND MSG="New shaper_freq_y: "{new_shaper_freq_y}
                    RESPOND MSG="Old shaper_freq_y: "{shaper.shaper_freq_y}
                {% endif %}
            {% endif %}
            {% if pending_shaper.shaper_type_y %}
                {% set new_shaper_type_y = pending_shaper.shaper_type_y %}
                {% if new_shaper_type_y != shaper.shaper_type_y %}
                    RESPOND MSG="New shaper_type_y: "{new_shaper_type_y}
                    RESPOND MSG="Old shaper_type_y: "{shaper.shaper_type_y}
                {% endif %}
            {% endif %}
            {% if pending_shaper.shaper_freq_x %}
                {% set new_shaper_freq_x = pending_shaper.shaper_freq_x %}
                {% if new_shaper_freq_x != shaper.shaper_freq_x %}
                    RESPOND MSG="New shaper_freq_x: "{new_shaper_freq_x}
                    RESPOND MSG="Old shaper_freq_x: "{shaper.shaper_freq_x}
                {% endif %}
            {% endif %}
            {% if pending_shaper.shaper_type_x %}
                {% set new_shaper_type_x = pending_shaper.shaper_type_x %}
                {% if new_shaper_type_x != shaper.shaper_type_x %}
                    RESPOND MSG="New shaper_type_x: "{new_shaper_type_x}
                    RESPOND MSG="Old shaper_type_x: "{shaper.shaper_type_x}
                {% endif %}
            {% endif %}
            RESPOND MSG="INPUT_SHAPER"
        {% endif %}
        {% if items['extruder'] %}
            {% set extruder = config.config["extruder"] %}
            {% set pending_extruder = items['extruder'] %}
            {% set new_extruder_pid_kd = pending_extruder.pid_kd %}
            {% if new_extruder_pid_kd != extruder.pid_kd %}
                RESPOND MSG="New pid_kd: "{new_extruder_pid_kd}
                RESPOND MSG="Old pid_kd: "{extruder.pid_kd}
            {% endif %}
            {% set new_extruder_pid_ki = pending_extruder.pid_ki %}
            {% if new_extruder_pid_ki != extruder.pid_ki %}
                RESPOND MSG="New pid_ki: "{new_extruder_pid_ki}
                RESPOND MSG="Old pid_ki: "{extruder.pid_ki}
            {% endif %}
            {% set new_extruder_pid_kp = pending_extruder.pid_kp %}
            {% if new_extruder_pid_kp != extruder.pid_kp %}
                RESPOND MSG="New pid_kp: "{new_extruder_pid_kp}
                RESPOND MSG="Old pid_kp: "{extruder.pid_kp}
            {% endif %}
            {% set new_extruder_control = pending_extruder.control %}
            {% if new_extruder_control != extruder.control %}
                RESPOND MSG="New control: "{new_extruder_control}
                RESPOND MSG="Old control: "{extruder.control}
            {% endif %}
            RESPOND MSG="EXTRUDER"
        {% endif %}
        {% if items['heater_bed'] %}
            {% set heater_bed = config.config["heater_bed"] %}
            {% set pending_bed = items['heater_bed'] %}
            {% set new_heater_bed_pid_kd = pending_bed.pid_kd %}
            {% if new_heater_bed_pid_kd != heater_bed.pid_kd %}
                RESPOND MSG="New pid_kd: "{new_heater_bed_pid_kd}
                RESPOND MSG="Old pid_kd: "{heater_bed.pid_kd}
            {% endif %}
            {% set new_heater_bed_pid_ki = pending_bed.pid_ki %}
            {% if new_heater_bed_pid_ki != heater_bed.pid_ki %}
                RESPOND MSG="New pid_ki: "{new_heater_bed_pid_ki}
                RESPOND MSG="Old pid_ki: "{heater_bed.pid_ki}
            {% endif %}
            {% set new_heater_bed_pid_kp = pending_bed.pid_kp %}
            {% if new_heater_bed_pid_kp != heater_bed.pid_kp %}
                RESPOND MSG="New pid_kp: "{new_heater_bed_pid_kp}
                RESPOND MSG="Old pid_kp: "{heater_bed.pid_kp}
            {% endif %}
            {% set new_heater_bed_control = pending_bed.control %}
            {% if new_heater_bed_control != heater_bed.control %}
                RESPOND MSG="New control: "{new_heater_bed_control}
                RESPOND MSG="Old control: "{heater_bed.control}
            {% endif %}
            RESPOND MSG="EXTRUDER"
        {% endif %}
        {% if items['bed_mesh'] %}
            RESPOND MSG="There is a new mesh pending."
        {% endif %}
    {% endif %}